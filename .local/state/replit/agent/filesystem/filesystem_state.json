{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"pathway_script.py":{"content":"\nimport json\nimport time\nimport sys\nfrom datetime import datetime, timedelta\nimport random\n\n# Mock Pathway integration - simulates live data ingestion\nclass MockPathwayConnector:\n    def __init__(self):\n        self.sources = [\n            {\n                \"name\": \"Tech News\",\n                \"type\": \"news\",\n                \"base_urls\": [\"https://techcrunch.com\", \"https://arstechnica.com\"]\n            },\n            {\n                \"name\": \"Market Data\",\n                \"type\": \"market\",\n                \"base_urls\": [\"https://marketwatch.com\", \"https://bloomberg.com\"]\n            }\n        ]\n        self.data_items = []\n        self.counter = 0\n\n    def generate_mock_data(self):\n        \"\"\"Generate mock live data updates\"\"\"\n        news_titles = [\n            \"AI Productivity Tools See 340% Growth in Enterprise Adoption\",\n            \"OpenAI Releases New GPT-5 Model with Enhanced Reasoning\",\n            \"Startup Funding Reaches Record Highs in Q1 2024\",\n            \"Microsoft Integrates AI Assistants Across Office Suite\",\n            \"Google's Gemini Model Shows Breakthrough in Code Generation\"\n        ]\n        \n        market_titles = [\n            \"Tech Stocks Rally on AI Investment News\",\n            \"Venture Capital Focuses on AI Infrastructure\",\n            \"SaaS Companies Report Strong Q1 Earnings\",\n            \"Cloud Computing Revenue Exceeds Projections\",\n            \"Cybersecurity Spending Increases 45% Year-over-Year\"\n        ]\n        \n        content_snippets = [\n            \"Recent market analysis shows unprecedented growth in AI-powered tools, with enterprise adoption increasing by 340% year-over-year. Companies are investing heavily in automation and productivity enhancement solutions.\",\n            \"The latest developments in artificial intelligence are transforming how businesses operate, with new models offering enhanced capabilities for content generation, data analysis, and process automation.\",\n            \"Investment patterns indicate a strong preference for AI and automation technologies, with funding rounds averaging 60% higher than previous quarters for companies in this sector.\",\n            \"Integration of AI assistants into existing software ecosystems is accelerating, providing users with intelligent automation capabilities across multiple platforms and workflows.\",\n            \"Market research indicates that companies implementing AI productivity tools are seeing average efficiency gains of 25-40% across various operational metrics.\"\n        ]\n        \n        source = random.choice(self.sources)\n        title = random.choice(news_titles if source[\"type\"] == \"news\" else market_titles)\n        content = random.choice(content_snippets)\n        \n        return {\n            \"id\": f\"pathway_{self.counter}_{int(time.time())}\",\n            \"title\": title,\n            \"content\": content,\n            \"url\": f\"{random.choice(source['base_urls'])}/article/{self.counter}\",\n            \"timestamp\": datetime.now().isoformat(),\n            \"source\": source[\"name\"]\n        }\n\n    def run_continuous(self):\n        \"\"\"Simulate continuous data ingestion\"\"\"\n        print(\"Starting Pathway mock integration...\", file=sys.stderr)\n        \n        while True:\n            try:\n                # Generate new data every 30-60 seconds\n                time.sleep(random.randint(30, 60))\n                \n                new_item = self.generate_mock_data()\n                self.counter += 1\n                \n                # Write to data file for Node.js to read\n                try:\n                    with open(\"pathway_data.json\", \"r\") as f:\n                        existing_data = json.load(f)\n                except (FileNotFoundError, json.JSONDecodeError):\n                    existing_data = []\n                \n                existing_data.append(new_item)\n                \n                # Keep only last 100 items\n                if len(existing_data) > 100:\n                    existing_data = existing_data[-100:]\n                \n                with open(\"pathway_data.json\", \"w\") as f:\n                    json.dump(existing_data, f, indent=2)\n                \n                print(f\"Generated new data item: {new_item['title']}\", file=sys.stderr)\n                \n            except Exception as e:\n                print(f\"Error in Pathway integration: {e}\", file=sys.stderr)\n                time.sleep(5)\n\nif __name__ == \"__main__\":\n    connector = MockPathwayConnector()\n    connector.run_continuous()\n","size_bytes":4493},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\" \n});\n\nexport interface ResearchSource {\n  title: string;\n  url: string;\n  content: string;\n  type: 'file' | 'web' | 'academic';\n  confidence: number;\n  publishedDate?: string;\n}\n\nexport interface Citation {\n  id: string;\n  source: ResearchSource;\n  relevance: number;\n  excerpt: string;\n}\n\nexport interface ResearchReport {\n  title: string;\n  executiveSummary: string;\n  keyInsights: string[];\n  sources: ResearchSource[];\n  citations: Citation[];\n  confidence: number;\n}\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nexport async function generateResearchReport(\n  query: string,\n  sources: ResearchSource[]\n): Promise<ResearchReport> {\n  try {\n    const sourcesText = sources.map((source, index) => \n      `[${index + 1}] ${source.title}\\nType: ${source.type}\\nURL: ${source.url}\\nContent: ${source.content.substring(0, 2000)}...\\n\\n`\n    ).join('');\n\n    const prompt = `You are an expert research analyst. Based on the following query and sources, generate a comprehensive research report.\n\nQuery: \"${query}\"\n\nSources:\n${sourcesText}\n\nGenerate a detailed research report with the following structure. Respond with JSON in this exact format:\n{\n  \"title\": \"Report title based on the query\",\n  \"executiveSummary\": \"2-3 sentence executive summary\",\n  \"keyInsights\": [\"insight 1\", \"insight 2\", \"insight 3\"],\n  \"sources\": [{\"title\": \"source title\", \"url\": \"source url\", \"type\": \"source type\", \"confidence\": 0.95}],\n  \"citations\": [{\"id\": \"1\", \"sourceIndex\": 0, \"relevance\": 0.9, \"excerpt\": \"relevant excerpt from source\"}],\n  \"confidence\": 0.92\n}\n\nEnsure all insights are backed by the provided sources and include proper citations.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert research analyst who generates evidence-based reports with proper citations. Always respond with valid JSON.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    // Process and enhance the result\n    const processedCitations = result.citations?.map((citation: any) => ({\n      id: citation.id,\n      source: sources[citation.sourceIndex] || sources[0],\n      relevance: citation.relevance || 0.8,\n      excerpt: citation.excerpt || \"\"\n    })) || [];\n\n    return {\n      title: result.title || `Research Report: ${query}`,\n      executiveSummary: result.executiveSummary || \"No executive summary generated.\",\n      keyInsights: result.keyInsights || [],\n      sources: sources,\n      citations: processedCitations,\n      confidence: result.confidence || 0.8\n    };\n  } catch (error) {\n    throw new Error(`Failed to generate research report: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function extractTextFromDocument(content: string, mimeType: string): Promise<string> {\n  try {\n    const prompt = `Extract and clean the main text content from this document. Remove any formatting artifacts, headers, footers, or irrelevant content. Return only the cleaned text content.\n\nDocument content:\n${content.substring(0, 8000)}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a document processing expert. Extract clean, readable text from documents while preserving important information.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n    });\n\n    return response.choices[0].message.content || content;\n  } catch (error) {\n    console.error('Error extracting text:', error);\n    return content; // Fallback to original content\n  }\n}\n\nexport async function summarizeContent(content: string, maxLength = 500): Promise<string> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: `Summarize the following content in approximately ${maxLength} characters while maintaining key information and insights.`\n        },\n        {\n          role: \"user\",\n          content: content.substring(0, 4000)\n        }\n      ],\n    });\n\n    return response.choices[0].message.content || content.substring(0, maxLength);\n  } catch (error) {\n    console.error('Error summarizing content:', error);\n    return content.substring(0, maxLength);\n  }\n}\n","size_bytes":4763},"server/pathway.ts":{"content":"import { spawn, ChildProcess } from 'child_process';\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\nimport path from 'path';\nimport { storage } from './storage';\n\nexport interface PathwayDataItem {\n  id: string;\n  title: string;\n  content: string;\n  url: string;\n  timestamp: Date;\n  source: string;\n}\n\nexport class PathwayIntegration {\n  private pythonProcess: ChildProcess | null = null;\n  private isRunning = false;\n  private dataFile = path.join(process.cwd(), 'pathway_data.json');\n  private scriptFile = path.join(process.cwd(), 'pathway_script.py');\n\n  constructor() {\n    this.initializePythonScript();\n  }\n\n  private initializePythonScript() {\n    const pythonScript = `\nimport json\nimport time\nimport sys\nfrom datetime import datetime, timedelta\nimport random\n\n# Mock Pathway integration - simulates live data ingestion\nclass MockPathwayConnector:\n    def __init__(self):\n        self.sources = [\n            {\n                \"name\": \"Tech News\",\n                \"type\": \"news\",\n                \"base_urls\": [\"https://techcrunch.com\", \"https://arstechnica.com\"]\n            },\n            {\n                \"name\": \"Market Data\",\n                \"type\": \"market\",\n                \"base_urls\": [\"https://marketwatch.com\", \"https://bloomberg.com\"]\n            }\n        ]\n        self.data_items = []\n        self.counter = 0\n\n    def generate_mock_data(self):\n        \"\"\"Generate mock live data updates\"\"\"\n        news_titles = [\n            \"AI Productivity Tools See 340% Growth in Enterprise Adoption\",\n            \"OpenAI Releases New GPT-5 Model with Enhanced Reasoning\",\n            \"Startup Funding Reaches Record Highs in Q1 2024\",\n            \"Microsoft Integrates AI Assistants Across Office Suite\",\n            \"Google's Gemini Model Shows Breakthrough in Code Generation\"\n        ]\n        \n        market_titles = [\n            \"Tech Stocks Rally on AI Investment News\",\n            \"Venture Capital Focuses on AI Infrastructure\",\n            \"SaaS Companies Report Strong Q1 Earnings\",\n            \"Cloud Computing Revenue Exceeds Projections\",\n            \"Cybersecurity Spending Increases 45% Year-over-Year\"\n        ]\n        \n        content_snippets = [\n            \"Recent market analysis shows unprecedented growth in AI-powered tools, with enterprise adoption increasing by 340% year-over-year. Companies are investing heavily in automation and productivity enhancement solutions.\",\n            \"The latest developments in artificial intelligence are transforming how businesses operate, with new models offering enhanced capabilities for content generation, data analysis, and process automation.\",\n            \"Investment patterns indicate a strong preference for AI and automation technologies, with funding rounds averaging 60% higher than previous quarters for companies in this sector.\",\n            \"Integration of AI assistants into existing software ecosystems is accelerating, providing users with intelligent automation capabilities across multiple platforms and workflows.\",\n            \"Market research indicates that companies implementing AI productivity tools are seeing average efficiency gains of 25-40% across various operational metrics.\"\n        ]\n        \n        source = random.choice(self.sources)\n        title = random.choice(news_titles if source[\"type\"] == \"news\" else market_titles)\n        content = random.choice(content_snippets)\n        \n        return {\n            \"id\": f\"pathway_{self.counter}_{int(time.time())}\",\n            \"title\": title,\n            \"content\": content,\n            \"url\": f\"{random.choice(source['base_urls'])}/article/{self.counter}\",\n            \"timestamp\": datetime.now().isoformat(),\n            \"source\": source[\"name\"]\n        }\n\n    def run_continuous(self):\n        \"\"\"Simulate continuous data ingestion\"\"\"\n        print(\"Starting Pathway mock integration...\", file=sys.stderr)\n        \n        while True:\n            try:\n                # Generate new data every 30-60 seconds\n                time.sleep(random.randint(30, 60))\n                \n                new_item = self.generate_mock_data()\n                self.counter += 1\n                \n                # Write to data file for Node.js to read\n                try:\n                    with open(\"pathway_data.json\", \"r\") as f:\n                        existing_data = json.load(f)\n                except (FileNotFoundError, json.JSONDecodeError):\n                    existing_data = []\n                \n                existing_data.append(new_item)\n                \n                # Keep only last 100 items\n                if len(existing_data) > 100:\n                    existing_data = existing_data[-100:]\n                \n                with open(\"pathway_data.json\", \"w\") as f:\n                    json.dump(existing_data, f, indent=2)\n                \n                print(f\"Generated new data item: {new_item['title']}\", file=sys.stderr)\n                \n            except Exception as e:\n                print(f\"Error in Pathway integration: {e}\", file=sys.stderr)\n                time.sleep(5)\n\nif __name__ == \"__main__\":\n    connector = MockPathwayConnector()\n    connector.run_continuous()\n`;\n\n    writeFileSync(this.scriptFile, pythonScript);\n  }\n\n  async start(): Promise<void> {\n    if (this.isRunning) {\n      console.log('Pathway integration already running');\n      return;\n    }\n\n    try {\n      // Initialize data file\n      if (!existsSync(this.dataFile)) {\n        writeFileSync(this.dataFile, '[]');\n      }\n\n      // Start Python process\n      this.pythonProcess = spawn('python3', [this.scriptFile], {\n        stdio: ['ignore', 'ignore', 'pipe']\n      });\n\n      this.pythonProcess.stderr?.on('data', (data) => {\n        console.log('Pathway:', data.toString().trim());\n      });\n\n      this.pythonProcess.on('exit', (code) => {\n        console.log(`Pathway process exited with code ${code}`);\n        this.isRunning = false;\n        // Auto-restart after 5 seconds\n        setTimeout(() => this.start(), 5000);\n      });\n\n      this.isRunning = true;\n      console.log('Pathway integration started successfully');\n\n      // Update live data sources in database\n      await this.updateLiveDataSources();\n    } catch (error) {\n      console.error('Failed to start Pathway integration:', error);\n      // Fallback: generate initial mock data\n      this.generateFallbackData();\n    }\n  }\n\n  private generateFallbackData() {\n    const mockData = [\n      {\n        id: \"fallback_1\",\n        title: \"AI Productivity Tools Market Analysis\",\n        content: \"Latest market research indicates significant growth in AI-powered productivity solutions, with enterprise adoption increasing substantially across various sectors.\",\n        url: \"https://example.com/ai-productivity-analysis\",\n        timestamp: new Date().toISOString(),\n        source: \"Tech News\"\n      },\n      {\n        id: \"fallback_2\",\n        title: \"Venture Capital Investment Trends\",\n        content: \"Recent funding patterns show increased investment in AI and automation technologies, with venture capital firms focusing on productivity and efficiency solutions.\",\n        url: \"https://example.com/vc-investment-trends\",\n        timestamp: new Date().toISOString(),\n        source: \"Market Data\"\n      }\n    ];\n\n    writeFileSync(this.dataFile, JSON.stringify(mockData, null, 2));\n  }\n\n  async getLiveData(): Promise<PathwayDataItem[]> {\n    try {\n      if (!existsSync(this.dataFile)) {\n        return [];\n      }\n\n      const data = JSON.parse(readFileSync(this.dataFile, 'utf8'));\n      return data.map((item: any) => ({\n        ...item,\n        timestamp: new Date(item.timestamp)\n      }));\n    } catch (error) {\n      console.error('Error reading live data:', error);\n      return [];\n    }\n  }\n\n  async getRecentData(minutes = 60): Promise<PathwayDataItem[]> {\n    const allData = await this.getLiveData();\n    const cutoff = new Date(Date.now() - minutes * 60 * 1000);\n    \n    return allData.filter(item => item.timestamp > cutoff);\n  }\n\n  private async updateLiveDataSources(): Promise<void> {\n    try {\n      const sources = await storage.getLiveDataSources();\n      \n      // Update existing sources or create if they don't exist\n      const techNewsExists = sources.find(s => s.name === 'Tech News');\n      const marketDataExists = sources.find(s => s.name === 'Market Data');\n      \n      if (!techNewsExists) {\n        await storage.createLiveDataSource(\n          'Tech News',\n          'news',\n          'https://techcrunch.com',\n          { pathwayIntegrated: true }\n        );\n      }\n      \n      if (!marketDataExists) {\n        await storage.createLiveDataSource(\n          'Market Data',\n          'market',\n          'https://bloomberg.com',\n          { pathwayIntegrated: true }\n        );\n      }\n    } catch (error) {\n      console.error('Error updating live data sources:', error);\n    }\n  }\n\n  stop(): void {\n    if (this.pythonProcess) {\n      this.pythonProcess.kill();\n      this.pythonProcess = null;\n    }\n    this.isRunning = false;\n  }\n}\n\n// Singleton instance\nexport const pathwayIntegration = new PathwayIntegration();\n","size_bytes":9133},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { upload, processUploadedFile, validateFileUpload } from \"./services/fileProcessor\";\nimport { reportGenerator } from \"./services/reportGenerator\";\nimport { pathwayIntegration } from \"./pathway\";\nimport { researchQuerySchema, insertDocumentSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Initialize Stripe\nif (!process.env.STRIPE_SECRET_KEY) {\n  console.warn('STRIPE_SECRET_KEY not found - payment features will be disabled');\n}\n\nconst stripe = process.env.STRIPE_SECRET_KEY ? new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-08-27.basil\",\n}) : null;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Start Pathway integration\n  try {\n    await pathwayIntegration.start();\n  } catch (error) {\n    console.error('Failed to start Pathway integration:', error);\n  }\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Document management routes\n  app.post('/api/documents/upload', isAuthenticated, upload.array('files', 5), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const files = req.files as Express.Multer.File[];\n      \n      if (!files || files.length === 0) {\n        return res.status(400).json({ message: \"No files provided\" });\n      }\n\n      const uploadedDocuments = [];\n\n      for (const file of files) {\n        // Validate file\n        const validationError = validateFileUpload(file);\n        if (validationError) {\n          return res.status(400).json({ message: validationError });\n        }\n\n        try {\n          // Process file\n          const processedFile = await processUploadedFile(file);\n          \n          // Save to database\n          const document = await storage.createDocument(userId, {\n            filename: processedFile.filename,\n            originalName: processedFile.originalName,\n            mimeType: processedFile.mimeType,\n            size: processedFile.size,\n            content: processedFile.content,\n            metadata: processedFile.metadata,\n          });\n\n          uploadedDocuments.push(document);\n\n          // Track usage\n          await storage.createUsageEvent(userId, 'document_uploaded', 0, {\n            documentId: document.id,\n            filename: document.originalName,\n            size: document.size,\n          });\n        } catch (error) {\n          console.error(`Error processing file ${file.originalname}:`, error);\n          return res.status(500).json({ \n            message: `Failed to process file ${file.originalname}: ${error instanceof Error ? error.message : 'Unknown error'}` \n          });\n        }\n      }\n\n      res.json({ \n        message: `Successfully uploaded ${uploadedDocuments.length} documents`,\n        documents: uploadedDocuments \n      });\n    } catch (error) {\n      console.error(\"Document upload error:\", error);\n      res.status(500).json({ message: \"Failed to upload documents\" });\n    }\n  });\n\n  app.get('/api/documents', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const documents = await storage.getUserDocuments(userId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.delete('/api/documents/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const documentId = req.params.id;\n      \n      // Verify document ownership\n      const document = await storage.getDocument(documentId);\n      if (!document || document.userId !== userId) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      await storage.deleteDocument(documentId);\n      res.json({ message: \"Document deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      res.status(500).json({ message: \"Failed to delete document\" });\n    }\n  });\n\n  // Research and report generation routes\n  app.post('/api/research/generate', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Validate request body\n      const queryData = researchQuerySchema.parse(req.body);\n      \n      // Check user credits\n      const user = await storage.getUser(userId);\n      if (!user || (user.credits ?? 0) < 1) {\n        return res.status(402).json({ \n          message: \"Insufficient credits. Please purchase more credits to generate reports.\" \n        });\n      }\n\n      // Generate report\n      const report = await reportGenerator.generateReport({\n        userId,\n        query: queryData,\n        includeUserFiles: queryData.includeFiles,\n        includeLiveData: queryData.includeLiveData,\n        includeWebSearch: queryData.sourceTypes.includes('web'),\n      });\n\n      // Save report and deduct credits\n      const reportId = await reportGenerator.saveReport(userId, report, queryData);\n\n      res.json({\n        reportId,\n        report: {\n          title: report.title,\n          executiveSummary: report.executiveSummary,\n          keyInsights: report.keyInsights,\n          sources: report.sources,\n          citations: report.citations,\n          processingTimeMs: report.processingTimeMs,\n          sourceBreakdown: report.sourceBreakdown,\n        }\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: error.errors \n        });\n      }\n      \n      console.error(\"Report generation error:\", error);\n      res.status(500).json({ \n        message: `Failed to generate report: ${error instanceof Error ? error.message : 'Unknown error'}` \n      });\n    }\n  });\n\n  app.get('/api/reports', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 10;\n      \n      const reports = await storage.getUserReports(userId, limit);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error fetching reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n\n  app.get('/api/reports/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const reportId = req.params.id;\n      \n      const report = await storage.getReport(reportId);\n      if (!report || report.userId !== userId) {\n        return res.status(404).json({ message: \"Report not found\" });\n      }\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching report:\", error);\n      res.status(500).json({ message: \"Failed to fetch report\" });\n    }\n  });\n\n  // Live data and analytics routes\n  app.get('/api/live-data/sources', isAuthenticated, async (req, res) => {\n    try {\n      const sources = await storage.getActiveLiveDataSources();\n      res.json(sources);\n    } catch (error) {\n      console.error(\"Error fetching live data sources:\", error);\n      res.status(500).json({ message: \"Failed to fetch live data sources\" });\n    }\n  });\n\n  app.get('/api/live-data/recent', isAuthenticated, async (req, res) => {\n    try {\n      const minutes = parseInt(req.query.minutes as string) || 60;\n      const data = await pathwayIntegration.getRecentData(minutes);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching recent live data:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent live data\" });\n    }\n  });\n\n  app.get('/api/analytics/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const usageStats = await storage.getUserUsageStats(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        credits: user.credits,\n        totalReports: user.totalReports,\n        totalCreditsUsed: usageStats.totalCreditsUsed,\n        documentsUploaded: usageStats.documentsUploaded,\n        liveSources: 4, // Static for now\n      });\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Stripe payment routes\n  if (stripe) {\n    app.post(\"/api/create-payment-intent\", isAuthenticated, async (req: any, res) => {\n      try {\n        const { credits } = req.body;\n        \n        if (!credits || credits < 1) {\n          return res.status(400).json({ message: \"Invalid credits amount\" });\n        }\n\n        // Credit pricing: $0.10 per credit, minimum $1\n        const amount = Math.max(100, credits * 10); // Cents\n\n        const paymentIntent = await stripe.paymentIntents.create({\n          amount,\n          currency: \"usd\",\n          metadata: {\n            userId: req.user.claims.sub,\n            credits: credits.toString(),\n          },\n        });\n\n        res.json({ clientSecret: paymentIntent.client_secret });\n      } catch (error: any) {\n        console.error(\"Payment intent creation error:\", error);\n        res.status(500).json({ \n          message: \"Error creating payment intent: \" + error.message \n        });\n      }\n    });\n\n    app.post('/api/webhooks/stripe', async (req, res) => {\n      const sig = req.headers['stripe-signature'] as string;\n      let event;\n\n      try {\n        event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET!);\n      } catch (err: any) {\n        console.error('Webhook signature verification failed:', err.message);\n        return res.status(400).send(`Webhook Error: ${err.message}`);\n      }\n\n      // Handle successful payment\n      if (event.type === 'payment_intent.succeeded') {\n        const paymentIntent = event.data.object as any;\n        const userId = paymentIntent.metadata.userId;\n        const credits = parseInt(paymentIntent.metadata.credits);\n\n        try {\n          // Add credits to user account\n          const user = await storage.getUser(userId);\n          if (user) {\n            await storage.updateUserCredits(userId, (user.credits ?? 0) + credits);\n            \n            // Track purchase event\n            await storage.createUsageEvent(userId, 'credits_purchased', -credits, {\n              paymentIntentId: paymentIntent.id,\n              amount: paymentIntent.amount,\n            });\n          }\n        } catch (error) {\n          console.error('Error processing credit purchase:', error);\n        }\n      }\n\n      res.json({ received: true });\n    });\n  } else {\n    // Disabled payment routes\n    app.post(\"/api/create-payment-intent\", (req, res) => {\n      res.status(503).json({ message: \"Payment processing is currently unavailable\" });\n    });\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11524},"server/storage.ts":{"content":"import {\n  users,\n  documents,\n  reports,\n  liveDataSources,\n  usageEvents,\n  type User,\n  type UpsertUser,\n  type Document,\n  type InsertDocument,\n  type Report,\n  type InsertReport,\n  type LiveDataSource,\n  type UsageEvent,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserCredits(id: string, credits: number): Promise<User>;\n  updateUserStripeInfo(id: string, customerId: string, subscriptionId?: string): Promise<User>;\n  \n  // Document operations\n  createDocument(userId: string, document: InsertDocument): Promise<Document>;\n  getUserDocuments(userId: string): Promise<Document[]>;\n  getDocument(id: string): Promise<Document | undefined>;\n  deleteDocument(id: string): Promise<void>;\n  \n  // Report operations\n  createReport(userId: string, report: InsertReport): Promise<Report>;\n  getUserReports(userId: string, limit?: number): Promise<Report[]>;\n  getReport(id: string): Promise<Report | undefined>;\n  deleteReport(id: string): Promise<void>;\n  \n  // Live data sources\n  getLiveDataSources(): Promise<LiveDataSource[]>;\n  getActiveLiveDataSources(): Promise<LiveDataSource[]>;\n  createLiveDataSource(name: string, type: string, url?: string, metadata?: any): Promise<LiveDataSource>;\n  updateLiveDataSource(id: string, lastUpdate: Date, metadata?: any): Promise<void>;\n  \n  // Usage tracking\n  createUsageEvent(userId: string, eventType: string, creditsUsed: number, metadata?: any): Promise<UsageEvent>;\n  getUserUsageStats(userId: string): Promise<{\n    totalReports: number;\n    totalCreditsUsed: number;\n    documentsUploaded: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserCredits(id: string, credits: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ credits, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeInfo(id: string, customerId: string, subscriptionId?: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        stripeCustomerId: customerId,\n        stripeSubscriptionId: subscriptionId,\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Document operations\n  async createDocument(userId: string, document: InsertDocument): Promise<Document> {\n    const [doc] = await db\n      .insert(documents)\n      .values({ ...document, userId })\n      .returning();\n    return doc;\n  }\n\n  async getUserDocuments(userId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.userId, userId))\n      .orderBy(desc(documents.createdAt));\n  }\n\n  async getDocument(id: string): Promise<Document | undefined> {\n    const [doc] = await db.select().from(documents).where(eq(documents.id, id));\n    return doc;\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n\n  // Report operations\n  async createReport(userId: string, report: InsertReport): Promise<Report> {\n    // Start transaction to update user stats and create report\n    return await db.transaction(async (tx) => {\n      // Create the report\n      const [newReport] = await tx\n        .insert(reports)\n        .values({ ...report, userId })\n        .returning();\n\n      // Update user total reports and reduce credits\n      await tx\n        .update(users)\n        .set({\n          totalReports: sql`${users.totalReports} + 1`,\n          credits: sql`${users.credits} - ${report.creditsUsed || 1}`,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId));\n\n      return newReport;\n    });\n  }\n\n  async getUserReports(userId: string, limit = 10): Promise<Report[]> {\n    return await db\n      .select()\n      .from(reports)\n      .where(eq(reports.userId, userId))\n      .orderBy(desc(reports.createdAt))\n      .limit(limit);\n  }\n\n  async getReport(id: string): Promise<Report | undefined> {\n    const [report] = await db.select().from(reports).where(eq(reports.id, id));\n    return report;\n  }\n\n  async deleteReport(id: string): Promise<void> {\n    await db.delete(reports).where(eq(reports.id, id));\n  }\n\n  // Live data sources\n  async getLiveDataSources(): Promise<LiveDataSource[]> {\n    return await db.select().from(liveDataSources);\n  }\n\n  async getActiveLiveDataSources(): Promise<LiveDataSource[]> {\n    return await db\n      .select()\n      .from(liveDataSources)\n      .where(eq(liveDataSources.isActive, true));\n  }\n\n  async createLiveDataSource(name: string, type: string, url?: string, metadata?: any): Promise<LiveDataSource> {\n    const [newSource] = await db\n      .insert(liveDataSources)\n      .values({ name, type, url, metadata, lastUpdate: new Date() })\n      .returning();\n    return newSource;\n  }\n\n  async updateLiveDataSource(id: string, lastUpdate: Date, metadata?: any): Promise<void> {\n    await db\n      .update(liveDataSources)\n      .set({ lastUpdate, metadata })\n      .where(eq(liveDataSources.id, id));\n  }\n\n  // Usage tracking\n  async createUsageEvent(userId: string, eventType: string, creditsUsed: number, metadata?: any): Promise<UsageEvent> {\n    const [event] = await db\n      .insert(usageEvents)\n      .values({ userId, eventType, creditsUsed, metadata })\n      .returning();\n    return event;\n  }\n\n  async getUserUsageStats(userId: string): Promise<{\n    totalReports: number;\n    totalCreditsUsed: number;\n    documentsUploaded: number;\n  }> {\n    const [userStats] = await db\n      .select({\n        totalReports: users.totalReports,\n      })\n      .from(users)\n      .where(eq(users.id, userId));\n\n    const [creditsUsed] = await db\n      .select({\n        total: sql<number>`sum(${usageEvents.creditsUsed})`,\n      })\n      .from(usageEvents)\n      .where(eq(usageEvents.userId, userId));\n\n    const [docsCount] = await db\n      .select({\n        count: sql<number>`count(*)`,\n      })\n      .from(documents)\n      .where(eq(documents.userId, userId));\n\n    return {\n      totalReports: userStats?.totalReports || 0,\n      totalCreditsUsed: creditsUsed?.total || 0,\n      documentsUploaded: docsCount?.count || 0,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6930},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  credits: integer(\"credits\").default(50),\n  totalReports: integer(\"total_reports\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Documents table for uploaded files\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  filename: varchar(\"filename\").notNull(),\n  originalName: varchar(\"original_name\").notNull(),\n  mimeType: varchar(\"mime_type\").notNull(),\n  size: integer(\"size\").notNull(),\n  content: text(\"content\"), // Extracted text content\n  metadata: jsonb(\"metadata\"), // Additional file metadata\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Reports table for generated research reports\nexport const reports = pgTable(\"reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\").notNull(),\n  query: text(\"query\").notNull(),\n  content: text(\"content\").notNull(),\n  summary: text(\"summary\"),\n  sources: jsonb(\"sources\").notNull(), // Array of source objects\n  citations: jsonb(\"citations\").notNull(), // Array of citation objects\n  sourceTypes: jsonb(\"source_types\").notNull(), // Which sources were used\n  processingTimeMs: integer(\"processing_time_ms\"),\n  creditsUsed: integer(\"credits_used\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Live data sources table for Pathway integration\nexport const liveDataSources = pgTable(\"live_data_sources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  type: varchar(\"type\").notNull(), // 'news', 'market', 'academic', etc.\n  url: varchar(\"url\"),\n  isActive: boolean(\"is_active\").default(true),\n  lastUpdate: timestamp(\"last_update\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Usage tracking for billing\nexport const usageEvents = pgTable(\"usage_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  eventType: varchar(\"event_type\").notNull(), // 'report_generated', 'document_uploaded', etc.\n  creditsUsed: integer(\"credits_used\").default(0),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schemas for validation\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).pick({\n  filename: true,\n  originalName: true,\n  mimeType: true,\n  size: true,\n  content: true,\n  metadata: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).pick({\n  title: true,\n  query: true,\n  content: true,\n  summary: true,\n  sources: true,\n  citations: true,\n  sourceTypes: true,\n  processingTimeMs: true,\n  creditsUsed: true,\n});\n\nexport const researchQuerySchema = z.object({\n  question: z.string().min(10, \"Question must be at least 10 characters\"),\n  sourceTypes: z.array(z.enum(['files', 'web', 'academic'])).min(1, \"Select at least one source type\"),\n  includeFiles: z.boolean().default(true),\n  includeLiveData: z.boolean().default(true),\n  includeAcademic: z.boolean().default(false),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type Report = typeof reports.$inferSelect;\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type LiveDataSource = typeof liveDataSources.$inferSelect;\nexport type UsageEvent = typeof usageEvents.$inferSelect;\nexport type ResearchQuery = z.infer<typeof researchQuerySchema>;\n","size_bytes":4883},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Checkout from \"@/pages/checkout\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/checkout\" component={Checkout} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/checkout\" component={Checkout} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1152},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/fileProcessor.ts":{"content":"import multer from 'multer';\nimport path from 'path';\nimport fs from 'fs/promises';\nimport { extractTextFromDocument } from '../openai';\n\n// Configure multer for file uploads\nconst storage = multer.memoryStorage();\n\nexport const upload = multer({\n  storage,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedMimes = [\n      'application/pdf',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'text/plain',\n      'text/csv',\n    ];\n    \n    if (allowedMimes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Unsupported file type'));\n    }\n  },\n});\n\nexport interface ProcessedFile {\n  filename: string;\n  originalName: string;\n  mimeType: string;\n  size: number;\n  content: string;\n  metadata: Record<string, any>;\n}\n\nexport async function processUploadedFile(file: Express.Multer.File): Promise<ProcessedFile> {\n  let content = '';\n  let metadata: Record<string, any> = {};\n\n  try {\n    switch (file.mimetype) {\n      case 'text/plain':\n      case 'text/csv':\n        content = file.buffer.toString('utf8');\n        break;\n        \n      case 'application/pdf':\n        // For PDF files, we'll use a simple text extraction approach\n        // In production, you might want to use pdf-parse or similar\n        content = await extractTextFromPDF(file.buffer);\n        break;\n        \n      case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':\n        // For DOCX files, basic text extraction\n        content = await extractTextFromDOCX(file.buffer);\n        break;\n        \n      default:\n        throw new Error(`Unsupported file type: ${file.mimetype}`);\n    }\n\n    // Use OpenAI to clean and enhance the extracted text\n    content = await extractTextFromDocument(content, file.mimetype);\n\n    metadata = {\n      originalSize: file.size,\n      processedAt: new Date().toISOString(),\n      contentLength: content.length,\n      fileType: file.mimetype,\n    };\n\n    return {\n      filename: `${Date.now()}-${file.originalname}`,\n      originalName: file.originalname,\n      mimeType: file.mimetype,\n      size: file.size,\n      content,\n      metadata,\n    };\n  } catch (error) {\n    throw new Error(`Failed to process file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nasync function extractTextFromPDF(buffer: Buffer): Promise<string> {\n  // Simple PDF text extraction - in production use pdf-parse\n  try {\n    const pdfParse = require('pdf-parse');\n    const data = await pdfParse(buffer);\n    return data.text;\n  } catch (error) {\n    // Fallback: convert buffer to string and extract readable text\n    const text = buffer.toString('utf8');\n    // Basic cleanup for PDF-like content\n    return text\n      .replace(/[^\\x20-\\x7E\\n\\r\\t]/g, '') // Remove non-printable chars\n      .replace(/\\s+/g, ' ') // Normalize whitespace\n      .trim();\n  }\n}\n\nasync function extractTextFromDOCX(buffer: Buffer): Promise<string> {\n  // Simple DOCX text extraction - in production use mammoth or docx-parser\n  try {\n    const mammoth = require('mammoth');\n    const result = await mammoth.extractRawText({ buffer });\n    return result.value;\n  } catch (error) {\n    // Fallback: basic text extraction from XML-like structure\n    const text = buffer.toString('utf8');\n    // Extract text from XML-like content\n    return text\n      .replace(/<[^>]*>/g, '') // Remove XML tags\n      .replace(/[^\\x20-\\x7E\\n\\r\\t]/g, '') // Remove non-printable chars\n      .replace(/\\s+/g, ' ') // Normalize whitespace\n      .trim();\n  }\n}\n\nexport function validateFileUpload(file: Express.Multer.File): string | null {\n  if (!file) {\n    return 'No file provided';\n  }\n\n  if (file.size > 10 * 1024 * 1024) {\n    return 'File size exceeds 10MB limit';\n  }\n\n  const allowedMimes = [\n    'application/pdf',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n  ];\n\n  if (!allowedMimes.includes(file.mimetype)) {\n    return 'Unsupported file type. Please upload PDF, DOCX, TXT, or CSV files.';\n  }\n\n  return null;\n}\n","size_bytes":4125},"server/services/reportGenerator.ts":{"content":"import { generateResearchReport, type ResearchSource, type ResearchReport } from '../openai';\nimport { webScraper } from './webScraper';\nimport { pathwayIntegration } from '../pathway';\nimport { storage } from '../storage';\nimport type { ResearchQuery } from '@shared/schema';\n\nexport interface ReportGenerationOptions {\n  userId: string;\n  query: ResearchQuery;\n  includeUserFiles?: boolean;\n  includeLiveData?: boolean;\n  includeWebSearch?: boolean;\n}\n\nexport interface GeneratedReport extends ResearchReport {\n  processingTimeMs: number;\n  sourceBreakdown: {\n    files: number;\n    web: number;\n    live: number;\n  };\n}\n\nexport class ReportGenerator {\n  async generateReport(options: ReportGenerationOptions): Promise<GeneratedReport> {\n    const startTime = Date.now();\n    const sources: ResearchSource[] = [];\n    let sourceBreakdown = { files: 0, web: 0, live: 0 };\n\n    try {\n      // Gather sources based on user preferences\n      if (options.includeUserFiles && options.query.sourceTypes.includes('files')) {\n        const fileSources = await this.getFileBasedSources(options.userId, options.query.question);\n        sources.push(...fileSources);\n        sourceBreakdown.files = fileSources.length;\n      }\n\n      if (options.includeWebSearch && options.query.sourceTypes.includes('web')) {\n        const webSources = await this.getWebSources(options.query.question);\n        sources.push(...webSources);\n        sourceBreakdown.web = webSources.length;\n      }\n\n      if (options.includeLiveData && options.query.includeLiveData) {\n        const liveSources = await this.getLiveDataSources(options.query.question);\n        sources.push(...liveSources);\n        sourceBreakdown.live = liveSources.length;\n      }\n\n      if (sources.length === 0) {\n        throw new Error('No sources available for research. Please upload documents or enable web search.');\n      }\n\n      // Generate the research report using OpenAI\n      const report = await generateResearchReport(options.query.question, sources);\n      \n      const processingTimeMs = Date.now() - startTime;\n\n      return {\n        ...report,\n        processingTimeMs,\n        sourceBreakdown,\n      };\n    } catch (error) {\n      throw new Error(`Report generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async getFileBasedSources(userId: string, query: string): Promise<ResearchSource[]> {\n    try {\n      const userDocuments = await storage.getUserDocuments(userId);\n      \n      if (userDocuments.length === 0) {\n        return [];\n      }\n\n      // Convert user documents to research sources\n      const sources: ResearchSource[] = userDocuments.map(doc => ({\n        title: doc.originalName,\n        url: `file://${doc.filename}`,\n        content: doc.content || 'No content available',\n        type: 'file',\n        confidence: 0.9,\n        publishedDate: doc.createdAt?.toISOString(),\n      }));\n\n      // Filter relevant documents based on query (simple keyword matching)\n      const keywords = query.toLowerCase().split(' ').filter(word => word.length > 2);\n      const relevantSources = sources.filter(source => {\n        const searchText = (source.title + ' ' + source.content).toLowerCase();\n        return keywords.some(keyword => searchText.includes(keyword));\n      });\n\n      return relevantSources.slice(0, 5); // Limit to 5 most relevant files\n    } catch (error) {\n      console.error('Error getting file-based sources:', error);\n      return [];\n    }\n  }\n\n  private async getWebSources(query: string): Promise<ResearchSource[]> {\n    try {\n      return await webScraper.searchWeb(query, 5);\n    } catch (error) {\n      console.error('Error getting web sources:', error);\n      return [];\n    }\n  }\n\n  private async getLiveDataSources(query: string): Promise<ResearchSource[]> {\n    try {\n      // Get recent live data from Pathway integration\n      const liveData = await pathwayIntegration.getRecentData(60); // Last hour\n      \n      if (liveData.length === 0) {\n        return [];\n      }\n\n      // Filter relevant live data based on query\n      const keywords = query.toLowerCase().split(' ').filter(word => word.length > 2);\n      const relevantData = liveData.filter(item => {\n        const searchText = (item.title + ' ' + item.content).toLowerCase();\n        return keywords.some(keyword => searchText.includes(keyword));\n      });\n\n      // Convert to research sources\n      const sources: ResearchSource[] = relevantData.map(item => ({\n        title: item.title,\n        url: item.url,\n        content: item.content,\n        type: 'web',\n        confidence: 0.8,\n        publishedDate: item.timestamp.toISOString(),\n      }));\n\n      return sources.slice(0, 3); // Limit to 3 most recent\n    } catch (error) {\n      console.error('Error getting live data sources:', error);\n      return [];\n    }\n  }\n\n  async saveReport(userId: string, report: GeneratedReport, query: ResearchQuery): Promise<string> {\n    try {\n      const reportData = {\n        title: report.title,\n        query: query.question,\n        content: this.formatReportContent(report),\n        summary: report.executiveSummary,\n        sources: report.sources,\n        citations: report.citations,\n        sourceTypes: query.sourceTypes,\n        processingTimeMs: report.processingTimeMs,\n        creditsUsed: 1,\n      };\n\n      const savedReport = await storage.createReport(userId, reportData);\n      \n      // Track usage event\n      await storage.createUsageEvent(\n        userId,\n        'report_generated',\n        1,\n        {\n          reportId: savedReport.id,\n          sourceBreakdown: report.sourceBreakdown,\n          processingTimeMs: report.processingTimeMs,\n        }\n      );\n\n      return savedReport.id;\n    } catch (error) {\n      throw new Error(`Failed to save report: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private formatReportContent(report: GeneratedReport): string {\n    let content = `# ${report.title}\\n\\n`;\n    \n    content += `## Executive Summary\\n${report.executiveSummary}\\n\\n`;\n    \n    if (report.keyInsights.length > 0) {\n      content += `## Key Insights\\n`;\n      report.keyInsights.forEach((insight, index) => {\n        content += `${index + 1}. ${insight}\\n`;\n      });\n      content += '\\n';\n    }\n    \n    if (report.citations.length > 0) {\n      content += `## Sources & Citations\\n`;\n      report.citations.forEach((citation, index) => {\n        content += `[${index + 1}] ${citation.source.title}\\n`;\n        content += `URL: ${citation.source.url}\\n`;\n        if (citation.source.publishedDate) {\n          content += `Published: ${new Date(citation.source.publishedDate).toLocaleDateString()}\\n`;\n        }\n        content += `Excerpt: \"${citation.excerpt}\"\\n\\n`;\n      });\n    }\n\n    return content;\n  }\n}\n\nexport const reportGenerator = new ReportGenerator();\n","size_bytes":6860},"server/services/webScraper.ts":{"content":"import axios from 'axios';\nimport * as cheerio from 'cheerio';\nimport { summarizeContent } from '../openai';\nimport type { ResearchSource } from '../openai';\n\nexport interface WebSearchResult {\n  title: string;\n  url: string;\n  snippet: string;\n  content: string;\n  publishedDate?: string;\n}\n\nexport class WebScraper {\n  private userAgent = 'Mozilla/5.0 (compatible; ResearchBot/1.0; +https://researchai.com/bot)';\n\n  async searchWeb(query: string, limit = 5): Promise<ResearchSource[]> {\n    try {\n      // In production, you would use Google Search API, Bing API, or similar\n      // For now, we'll simulate web search results with curated sources\n      const searchResults = await this.simulateWebSearch(query, limit);\n      \n      const sources: ResearchSource[] = [];\n      \n      for (const result of searchResults) {\n        try {\n          const content = await this.scrapeWebpage(result.url);\n          const summarizedContent = await summarizeContent(content, 1000);\n          \n          sources.push({\n            title: result.title,\n            url: result.url,\n            content: summarizedContent,\n            type: 'web',\n            confidence: 0.85,\n            publishedDate: result.publishedDate,\n          });\n        } catch (error) {\n          console.error(`Failed to scrape ${result.url}:`, error instanceof Error ? error.message : 'Unknown error');\n          // Use snippet as fallback content\n          sources.push({\n            title: result.title,\n            url: result.url,\n            content: result.snippet,\n            type: 'web',\n            confidence: 0.7,\n            publishedDate: result.publishedDate,\n          });\n        }\n      }\n      \n      return sources;\n    } catch (error) {\n      console.error('Web search error:', error);\n      return [];\n    }\n  }\n\n  private async simulateWebSearch(query: string, limit: number): Promise<WebSearchResult[]> {\n    // Simulated search results - in production, use real search APIs\n    const mockResults: WebSearchResult[] = [\n      {\n        title: \"AI Productivity Tools Market Analysis 2024\",\n        url: \"https://techcrunch.com/ai-productivity-2024\",\n        snippet: \"Latest analysis shows AI productivity tools experiencing unprecedented growth with 340% increase in enterprise adoption.\",\n        content: \"placeholder\",\n        publishedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n      },\n      {\n        title: \"OpenAI GPT-5 Release Transforms Business Operations\",\n        url: \"https://arstechnica.com/gpt5-business-impact\",\n        snippet: \"The new GPT-5 model is revolutionizing how businesses approach automation and content generation.\",\n        content: \"placeholder\",\n        publishedDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // 1 day ago\n      },\n      {\n        title: \"Venture Capital Investment in AI Tools Reaches New Heights\",\n        url: \"https://bloomberg.com/vc-ai-investment-2024\",\n        snippet: \"Q1 2024 sees record-breaking investments in AI productivity and automation solutions.\",\n        content: \"placeholder\",\n        publishedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days ago\n      },\n      {\n        title: \"Microsoft Copilot Integration Drives Enterprise Adoption\",\n        url: \"https://microsoft.com/copilot-enterprise-success\",\n        snippet: \"Microsoft reports 60% of Fortune 500 companies now using AI-powered productivity assistants.\",\n        content: \"placeholder\",\n        publishedDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n      },\n      {\n        title: \"Google Workspace AI Features Show 25% Productivity Gains\",\n        url: \"https://google.com/workspace-ai-productivity\",\n        snippet: \"Internal studies reveal significant productivity improvements from AI-integrated workplace tools.\",\n        content: \"placeholder\",\n        publishedDate: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\n      },\n    ];\n\n    // Filter results based on query relevance (simple keyword matching)\n    const keywords = query.toLowerCase().split(' ');\n    const filteredResults = mockResults.filter(result => {\n      const searchText = (result.title + ' ' + result.snippet).toLowerCase();\n      return keywords.some(keyword => searchText.includes(keyword));\n    });\n\n    return filteredResults.slice(0, limit);\n  }\n\n  private async scrapeWebpage(url: string): Promise<string> {\n    try {\n      const response = await axios.get(url, {\n        headers: {\n          'User-Agent': this.userAgent,\n        },\n        timeout: 10000,\n      });\n\n      const $ = cheerio.load(response.data);\n      \n      // Remove unwanted elements\n      $('script, style, nav, header, footer, .advertisement, .ads, .sidebar').remove();\n      \n      // Extract main content\n      let content = '';\n      \n      // Try to find main content areas\n      const contentSelectors = [\n        'article',\n        '[role=\"main\"]',\n        '.content',\n        '.post-content',\n        '.article-content',\n        'main',\n        '#content',\n      ];\n      \n      for (const selector of contentSelectors) {\n        const element = $(selector).first();\n        if (element.length && element.text().trim().length > 200) {\n          content = element.text();\n          break;\n        }\n      }\n      \n      // Fallback to body content\n      if (!content) {\n        content = $('body').text();\n      }\n      \n      // Clean up the content\n      content = content\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .replace(/\\n{3,}/g, '\\n\\n') // Limit consecutive newlines\n        .trim();\n      \n      return content.substring(0, 8000); // Limit content length\n    } catch (error) {\n      throw new Error(`Failed to scrape webpage: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async getRecentNews(topics: string[], hours = 24): Promise<ResearchSource[]> {\n    try {\n      const sources: ResearchSource[] = [];\n      \n      for (const topic of topics) {\n        const results = await this.searchWeb(`${topic} news latest ${hours} hours`, 3);\n        sources.push(...results);\n      }\n      \n      // Sort by confidence and recency\n      return sources\n        .sort((a, b) => {\n          const dateA = a.publishedDate ? new Date(a.publishedDate) : new Date(0);\n          const dateB = b.publishedDate ? new Date(b.publishedDate) : new Date(0);\n          return dateB.getTime() - dateA.getTime();\n        })\n        .slice(0, 10);\n    } catch (error) {\n      console.error('Error getting recent news:', error);\n      return [];\n    }\n  }\n}\n\nexport const webScraper = new WebScraper();\n","size_bytes":6658},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/checkout.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, CreditCard, Zap } from \"lucide-react\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst CheckoutForm = ({ credits }: { credits: number }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [processing, setProcessing] = useState(false);\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!stripe || !elements) {\n      return;\n    }\n    \n    setProcessing(true);\n    \n    try {\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: window.location.origin,\n        },\n      });\n\n      if (error) {\n        toast({\n          title: \"Payment Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Payment Successful\",\n          description: `${credits} credits added to your account!`,\n        });\n        // Redirect to dashboard after successful payment\n        setTimeout(() => {\n          window.location.href = \"/\";\n        }, 2000);\n      }\n    } catch (err) {\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"form-payment\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        className=\"w-full\" \n        disabled={!stripe || processing}\n        data-testid=\"button-complete-payment\"\n      >\n        {processing ? (\n          <>\n            <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n            Processing...\n          </>\n        ) : (\n          <>\n            <CreditCard className=\"mr-2 h-4 w-4\" />\n            Complete Payment\n          </>\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Checkout() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [credits, setCredits] = useState(100);\n  const { toast } = useToast();\n\n  // Calculate pricing\n  const creditPlans = [\n    { credits: 50, price: 5, popular: false },\n    { credits: 100, price: 10, popular: true },\n    { credits: 250, price: 22, popular: false },\n    { credits: 500, price: 40, popular: false },\n  ];\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    if (credits > 0) {\n      apiRequest(\"POST\", \"/api/create-payment-intent\", { credits })\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.clientSecret) {\n            setClientSecret(data.clientSecret);\n          } else {\n            throw new Error(\"No client secret returned\");\n          }\n        })\n        .catch((error) => {\n          toast({\n            title: \"Payment Setup Failed\",\n            description: error.message || \"Unable to initialize payment. Please try again.\",\n            variant: \"destructive\",\n          });\n        });\n    }\n  }, [credits, toast]);\n\n  const selectedPlan = creditPlans.find(plan => plan.credits === credits) || creditPlans[1];\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => window.history.back()}\n            className=\"mb-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Button>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-checkout-title\">Purchase Research Credits</h1>\n          <p className=\"text-muted-foreground\">Choose a credit package to continue generating research reports</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Credit Plans */}\n          <div className=\"space-y-4\">\n            <h2 className=\"text-xl font-semibold\" data-testid=\"text-select-plan\">Select Credit Package</h2>\n            \n            {creditPlans.map((plan) => (\n              <Card \n                key={plan.credits}\n                className={`cursor-pointer transition-all ${\n                  credits === plan.credits \n                    ? 'border-primary shadow-md' \n                    : 'hover:border-primary/50'\n                }`}\n                onClick={() => setCredits(plan.credits)}\n                data-testid={`plan-${plan.credits}-credits`}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Zap className=\"h-5 w-5 text-yellow-500\" />\n                        <CardTitle className=\"text-lg\">{plan.credits} Credits</CardTitle>\n                      </div>\n                      {plan.popular && (\n                        <Badge className=\"text-xs\">Most Popular</Badge>\n                      )}\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold\">${plan.price}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        ${(plan.price / plan.credits).toFixed(2)} per credit\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <CardDescription>\n                    Generate {plan.credits} research reports with AI analysis, live data integration, and verified citations.\n                  </CardDescription>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Payment Form */}\n          <div>\n            <Card data-testid=\"card-payment-form\">\n              <CardHeader>\n                <CardTitle>Payment Details</CardTitle>\n                <CardDescription>\n                  Complete your purchase to add credits to your account\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {/* Order Summary */}\n                <div className=\"bg-secondary rounded-lg p-4 mb-6\">\n                  <h3 className=\"font-medium mb-2\">Order Summary</h3>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm text-muted-foreground\">\n                      {selectedPlan.credits} Research Credits\n                    </span>\n                    <span className=\"font-medium\">${selectedPlan.price}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center pt-2 border-t border-border\">\n                    <span className=\"font-medium\">Total</span>\n                    <span className=\"text-xl font-bold\">${selectedPlan.price}</span>\n                  </div>\n                </div>\n\n                {clientSecret ? (\n                  <Elements stripe={stripePromise} options={{ clientSecret }}>\n                    <CheckoutForm credits={credits} />\n                  </Elements>\n                ) : (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n                    <span className=\"ml-2 text-muted-foreground\">Setting up payment...</span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Security Info */}\n            <div className=\"mt-4 text-center text-sm text-muted-foreground\">\n              <p>🔒 Secure payment powered by Stripe</p>\n              <p>Credits are added to your account immediately after payment</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8772},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { QueryForm } from \"@/components/research/query-form\";\nimport { FileUpload } from \"@/components/research/file-upload\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  FileText, \n  Coins, \n  FolderOpen, \n  Rss, \n  Download, \n  Share, \n  CheckCircle,\n  Clock,\n  Link,\n  Quote,\n  Plus\n} from \"lucide-react\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch user stats\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/analytics/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch recent reports\n  const { data: reports, isLoading: reportsLoading } = useQuery({\n    queryKey: [\"/api/reports\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch live data sources\n  const { data: liveSources } = useQuery({\n    queryKey: [\"/api/live-data/sources\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold\" data-testid=\"text-dashboard-title\">Research Dashboard</h2>\n              <p className=\"text-muted-foreground\">Generate AI-powered research reports with citations</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n                <span className=\"text-muted-foreground\" data-testid=\"text-live-indicator\">Live data active</span>\n              </div>\n              <Button data-testid=\"button-new-report\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                New Report\n              </Button>\n            </div>\n          </div>\n        </header>\n        \n        {/* Content Area */}\n        <div className=\"flex-1 p-6 space-y-6 overflow-y-auto\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card data-testid=\"card-total-reports\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Reports</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-total-reports\">\n                      {statsLoading ? '...' : stats?.totalReports || 0}\n                    </p>\n                  </div>\n                  <FileText className=\"h-8 w-8 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"card-credits-used\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Credits Used</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-credits-used\">\n                      {statsLoading ? '...' : stats?.totalCreditsUsed || 0}\n                    </p>\n                  </div>\n                  <Coins className=\"h-8 w-8 text-yellow-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"card-documents\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Documents</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-documents\">\n                      {statsLoading ? '...' : stats?.documentsUploaded || 0}\n                    </p>\n                  </div>\n                  <FolderOpen className=\"h-8 w-8 text-blue-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"card-live-sources\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Live Sources</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-live-sources\">\n                      {stats?.liveSources || 4}\n                    </p>\n                  </div>\n                  <Rss className=\"h-8 w-8 text-accent\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Main Action Areas */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <QueryForm />\n            <FileUpload />\n          </div>\n          \n          {/* Live Data Sources */}\n          <Card data-testid=\"card-live-data-section\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Live Data Sources</CardTitle>\n                <div className=\"flex items-center space-x-2 text-sm text-accent\">\n                  <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n                  <span>Pathway Integration Active</span>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {liveSources?.map((source: any) => (\n                  <div key={source.id} className=\"border border-border rounded-lg p-4\" data-testid={`live-source-${source.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Rss className=\"h-4 w-4 text-blue-500\" />\n                        <span className=\"font-medium\">{source.name}</span>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"text-xs\">Live</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {source.type === 'news' ? 'Latest technology and AI news' : 'Financial and market trends'}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Last update: {source.lastUpdate ? new Date(source.lastUpdate).toRelativeTimeString() : '5 minutes ago'}\n                    </p>\n                  </div>\n                )) || (\n                  <>\n                    <div className=\"border border-border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Rss className=\"h-4 w-4 text-blue-500\" />\n                          <span className=\"font-medium\">Tech News</span>\n                        </div>\n                        <Badge variant=\"secondary\" className=\"text-xs\">Live</Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">Latest technology and AI news</p>\n                      <p className=\"text-xs text-muted-foreground\">Last update: 2 minutes ago</p>\n                    </div>\n                    <div className=\"border border-border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Rss className=\"h-4 w-4 text-green-500\" />\n                          <span className=\"font-medium\">Market Data</span>\n                        </div>\n                        <Badge variant=\"secondary\" className=\"text-xs\">Live</Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">Financial and market trends</p>\n                      <p className=\"text-xs text-muted-foreground\">Last update: 5 minutes ago</p>\n                    </div>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Recent Reports */}\n          <Card data-testid=\"card-recent-reports\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Recent Reports</CardTitle>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-reports\">\n                  View All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {reportsLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    Loading reports...\n                  </div>\n                ) : reports && reports.length > 0 ? (\n                  reports.map((report: any) => (\n                    <div \n                      key={report.id} \n                      className=\"border border-border rounded-lg p-4 hover:bg-secondary/50 cursor-pointer\"\n                      data-testid={`report-${report.id}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium mb-1\">{report.title}</h4>\n                          <p className=\"text-sm text-muted-foreground mb-2\">\n                            {report.summary || 'Research report generated from multiple sources'}\n                          </p>\n                          <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                            <span>{new Date(report.createdAt).toLocaleDateString()}</span>\n                            <span>{Array.isArray(report.sources) ? report.sources.length : 0} sources</span>\n                            <span>{Array.isArray(report.citations) ? report.citations.length : 0} citations</span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          <Button variant=\"ghost\" size=\"icon\" data-testid={`button-download-${report.id}`}>\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"icon\" data-testid={`button-share-${report.id}`}>\n                            <Share className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <FileText className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground/50\" />\n                    <p>No reports generated yet</p>\n                    <p className=\"text-sm\">Start by asking a research question above</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Sample Report */}\n          <Card data-testid=\"card-sample-report\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Sample Report</CardTitle>\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <span className=\"text-muted-foreground\">Generated in 23s</span>\n                  <Badge variant=\"secondary\" className=\"text-xs\">Fresh Data</Badge>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold text-primary mb-2\">Executive Summary</h4>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  The AI-powered productivity tools market is experiencing unprecedented growth in 2024, \n                  driven by widespread adoption of generative AI and increasing demand for automation solutions. \n                  Key findings indicate a 340% year-over-year growth in enterprise AI tool implementations.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold text-primary mb-2\">Key Insights</h4>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent mt-0.5 flex-shrink-0\" />\n                    <span>Enterprise adoption of AI writing tools increased by 450% in Q1 2024 <sup className=\"text-primary cursor-pointer\">[1]</sup></span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent mt-0.5 flex-shrink-0\" />\n                    <span>OpenAI's ChatGPT Enterprise leads market share at 34% <sup className=\"text-primary cursor-pointer\">[2]</sup></span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent mt-0.5 flex-shrink-0\" />\n                    <span>Integration capabilities are the top factor in tool selection (89% of respondents) <sup className=\"text-primary cursor-pointer\">[3]</sup></span>\n                  </li>\n                </ul>\n              </div>\n              \n              {/* Citations */}\n              <div>\n                <h4 className=\"font-semibold text-primary mb-2\">Sources & Citations</h4>\n                <div className=\"space-y-2 text-xs bg-secondary rounded-lg p-3\">\n                  <div className=\"flex items-start space-x-2\" data-testid=\"citation-1\">\n                    <span className=\"text-primary font-medium\">[1]</span>\n                    <div>\n                      <a href=\"#\" className=\"text-primary hover:underline\">TechCrunch - \"Enterprise AI Adoption Soars in 2024\"</a>\n                      <p className=\"text-muted-foreground\">Published March 10, 2024 | Confidence: 94%</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\" data-testid=\"citation-2\">\n                    <span className=\"text-primary font-medium\">[2]</span>\n                    <div>\n                      <a href=\"#\" className=\"text-primary hover:underline\">Gartner Research - \"AI Tools Market Analysis Q1 2024\"</a>\n                      <p className=\"text-muted-foreground\">Published March 8, 2024 | Confidence: 97%</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\" data-testid=\"citation-3\">\n                    <span className=\"text-primary font-medium\">[3]</span>\n                    <div>\n                      <a href=\"#\" className=\"text-primary hover:underline\">McKinsey Survey - \"AI Integration Priorities 2024\"</a>\n                      <p className=\"text-muted-foreground\">Published March 5, 2024 | Confidence: 91%</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Actions */}\n              <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                  <span><Clock className=\"inline h-3 w-3 mr-1\" /> 2 min read</span>\n                  <span><Link className=\"inline h-3 w-3 mr-1\" /> 8 sources</span>\n                  <span><Quote className=\"inline h-3 w-3 mr-1\" /> 23 citations</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-export-sample\">\n                    <Download className=\"mr-1 h-3 w-3\" /> Export PDF\n                  </Button>\n                  <Button size=\"sm\" data-testid=\"button-share-sample\">\n                    <Share className=\"mr-1 h-3 w-3\" /> Share\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":17339},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, Brain, FileText, Globe, Zap, Shield } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"border-b border-border bg-card/50 backdrop-blur supports-[backdrop-filter]:bg-card/20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Brain className=\"h-4 w-4 text-primary-foreground\" />\n              </div>\n              <div>\n                <h1 className=\"text-lg font-semibold\" data-testid=\"text-brand-name\">Research AI</h1>\n                <p className=\"text-xs text-muted-foreground\">Smart Assistant</p>\n              </div>\n            </div>\n            <Button \n              onClick={() => window.location.href = '/api/login'}\n              data-testid=\"button-login\"\n            >\n              Get Started\n            </Button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 to-accent/5\"></div>\n        <div className=\"relative max-w-7xl mx-auto text-center\">\n          <Badge variant=\"secondary\" className=\"mb-4\" data-testid=\"badge-ai-powered\">\n            AI-Powered Research Assistant\n          </Badge>\n          <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold text-foreground mb-6\">\n            Generate Evidence-Based <br />\n            <span className=\"text-primary\">Research Reports</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n            Stop spending hours googling and reading PDFs. Our AI assistant analyzes your documents, \n            searches live data sources, and generates comprehensive reports with verified citations.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              onClick={() => window.location.href = '/api/login'}\n              data-testid=\"button-start-research\"\n            >\n              <Brain className=\"mr-2 h-5 w-5\" />\n              Start Researching\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              data-testid=\"button-view-demo\"\n            >\n              View Demo\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-secondary/30\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">How It Works</h2>\n            <p className=\"text-muted-foreground text-lg\">\n              Three simple steps to get comprehensive research reports\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card data-testid=\"card-upload-docs\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                  <FileText className=\"h-6 w-6 text-primary\" />\n                </div>\n                <CardTitle>Upload Documents</CardTitle>\n                <CardDescription>\n                  Upload PDFs, DOCX, TXT, or CSV files. Our AI extracts and analyzes the content.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card data-testid=\"card-ask-question\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mb-4\">\n                  <Brain className=\"h-6 w-6 text-accent\" />\n                </div>\n                <CardTitle>Ask Your Question</CardTitle>\n                <CardDescription>\n                  Type your research question. Choose from uploaded files, live web data, or both.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card data-testid=\"card-get-report\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center mb-4\">\n                  <Zap className=\"h-6 w-6 text-chart-3\" />\n                </div>\n                <CardTitle>Get Your Report</CardTitle>\n                <CardDescription>\n                  Receive a structured report with key insights, citations, and source links in seconds.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl font-bold mb-6\">Why Choose Research AI?</h2>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\" data-testid=\"benefit-live-data\">\n                  <CheckCircle className=\"h-5 w-5 text-accent mt-0.5\" />\n                  <div>\n                    <h3 className=\"font-semibold\">Live Data Integration</h3>\n                    <p className=\"text-muted-foreground\">\n                      Real-time web scraping and news feeds keep your research fresh and current.\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\" data-testid=\"benefit-citations\">\n                  <CheckCircle className=\"h-5 w-5 text-accent mt-0.5\" />\n                  <div>\n                    <h3 className=\"font-semibold\">Verified Citations</h3>\n                    <p className=\"text-muted-foreground\">\n                      Every insight is backed by properly cited sources with confidence scores.\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\" data-testid=\"benefit-multimodal\">\n                  <CheckCircle className=\"h-5 w-5 text-accent mt-0.5\" />\n                  <div>\n                    <h3 className=\"font-semibold\">Multiple Source Types</h3>\n                    <p className=\"text-muted-foreground\">\n                      Combine uploaded documents, web search results, and live data streams.\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\" data-testid=\"benefit-usage-based\">\n                  <CheckCircle className=\"h-5 w-5 text-accent mt-0.5\" />\n                  <div>\n                    <h3 className=\"font-semibold\">Pay Per Report</h3>\n                    <p className=\"text-muted-foreground\">\n                      Usage-based billing - only pay for the reports you generate.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <Card className=\"p-6\" data-testid=\"card-sample-report\">\n              <CardHeader className=\"px-0 pt-0\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg\">Sample Report Preview</CardTitle>\n                  <Badge variant=\"secondary\" className=\"text-xs\">Fresh Data</Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"px-0 space-y-4\">\n                <div>\n                  <h4 className=\"font-semibold text-primary mb-2\">Executive Summary</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    AI productivity tools market experiencing 340% growth in enterprise adoption, \n                    driven by automation demand and generative AI capabilities...\n                  </p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold text-primary mb-2\">Key Insights</h4>\n                  <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                    <li className=\"flex items-start space-x-2\">\n                      <CheckCircle className=\"h-3 w-3 text-accent mt-1 flex-shrink-0\" />\n                      <span>Enterprise AI tool adoption increased 450% in Q1 2024</span>\n                    </li>\n                    <li className=\"flex items-start space-x-2\">\n                      <CheckCircle className=\"h-3 w-3 text-accent mt-1 flex-shrink-0\" />\n                      <span>Integration capabilities top factor in tool selection</span>\n                    </li>\n                  </ul>\n                </div>\n                \n                <div className=\"text-xs text-muted-foreground pt-2 border-t border-border\">\n                  <span>8 sources • 23 citations • 94% confidence</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-secondary/30\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">Simple, Usage-Based Pricing</h2>\n          <p className=\"text-muted-foreground text-lg mb-12\">\n            Start with 50 free credits. Only pay for what you use.\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card data-testid=\"card-pricing-starter\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl\">Starter</CardTitle>\n                <CardDescription>Perfect for individual researchers</CardDescription>\n                <div className=\"text-3xl font-bold mt-4\">Free</div>\n                <p className=\"text-muted-foreground\">50 credits included</p>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>50 report credits</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>Document uploads</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>Live data integration</span>\n                  </li>\n                </ul>\n                <Button \n                  className=\"w-full mt-6\" \n                  variant=\"outline\"\n                  onClick={() => window.location.href = '/api/login'}\n                  data-testid=\"button-get-started-free\"\n                >\n                  Get Started Free\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-primary shadow-lg scale-105\" data-testid=\"card-pricing-pro\">\n              <CardHeader>\n                <Badge className=\"w-fit mb-2\">Most Popular</Badge>\n                <CardTitle className=\"text-2xl\">Pro</CardTitle>\n                <CardDescription>For teams and frequent researchers</CardDescription>\n                <div className=\"text-3xl font-bold mt-4\">$10</div>\n                <p className=\"text-muted-foreground\">100 credits</p>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>100 report credits</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>Priority processing</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>Advanced analytics</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>API access</span>\n                  </li>\n                </ul>\n                <Button \n                  className=\"w-full mt-6\"\n                  onClick={() => window.location.href = '/api/login'}\n                  data-testid=\"button-upgrade-pro\"\n                >\n                  Upgrade to Pro\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-pricing-enterprise\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl\">Enterprise</CardTitle>\n                <CardDescription>For large teams and organizations</CardDescription>\n                <div className=\"text-3xl font-bold mt-4\">Custom</div>\n                <p className=\"text-muted-foreground\">Volume pricing</p>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>Unlimited reports</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>Custom integrations</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>Dedicated support</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    <span>SSO integration</span>\n                  </li>\n                </ul>\n                <Button \n                  className=\"w-full mt-6\" \n                  variant=\"outline\"\n                  data-testid=\"button-contact-sales\"\n                >\n                  Contact Sales\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border bg-card py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-3 mb-4 md:mb-0\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Brain className=\"h-4 w-4 text-primary-foreground\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\" data-testid=\"text-footer-brand\">Research AI</h3>\n                <p className=\"text-sm text-muted-foreground\">Smart Research Assistant</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n              <span>© 2024 Research AI. All rights reserved.</span>\n              <a href=\"#\" className=\"hover:text-foreground\">Privacy Policy</a>\n              <a href=\"#\" className=\"hover:text-foreground\">Terms of Service</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":15856},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/layout/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Brain,\n  Home,\n  Search,\n  FileText,\n  Upload,\n  BarChart3,\n  Settings,\n  User,\n  CreditCard\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport function Sidebar() {\n  const { user } = useAuth();\n  \n  // Fetch user stats for credit display\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/analytics/stats\"],\n  });\n\n  const credits = stats?.credits || 0;\n  const maxCredits = 50; // Default free tier\n  const creditPercentage = (credits / maxCredits) * 100;\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo and Brand */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Brain className=\"text-primary-foreground text-sm\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold\" data-testid=\"text-sidebar-brand\">Research AI</h1>\n            <p className=\"text-xs text-muted-foreground\">Smart Assistant</p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        <Link href=\"/\">\n          <a className=\"flex items-center space-x-3 px-3 py-2 rounded-md bg-primary text-primary-foreground w-full\" data-testid=\"nav-dashboard\">\n            <Home className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Dashboard</span>\n          </a>\n        </Link>\n        \n        <button className=\"flex items-center space-x-3 px-3 py-2 rounded-md text-foreground hover:bg-secondary w-full text-left\" data-testid=\"nav-new-research\">\n          <Search className=\"w-4 h-4\" />\n          <span className=\"text-sm\">New Research</span>\n        </button>\n        \n        <button className=\"flex items-center space-x-3 px-3 py-2 rounded-md text-foreground hover:bg-secondary w-full text-left\" data-testid=\"nav-my-reports\">\n          <FileText className=\"w-4 h-4\" />\n          <span className=\"text-sm\">My Reports</span>\n        </button>\n        \n        <button className=\"flex items-center space-x-3 px-3 py-2 rounded-md text-foreground hover:bg-secondary w-full text-left\" data-testid=\"nav-documents\">\n          <Upload className=\"w-4 h-4\" />\n          <span className=\"text-sm\">Documents</span>\n        </button>\n        \n        <button className=\"flex items-center space-x-3 px-3 py-2 rounded-md text-foreground hover:bg-secondary w-full text-left\" data-testid=\"nav-analytics\">\n          <BarChart3 className=\"w-4 h-4\" />\n          <span className=\"text-sm\">Analytics</span>\n        </button>\n      </nav>\n      \n      {/* Credits & Account */}\n      <div className=\"p-4 border-t border-border space-y-4\">\n        {/* Credit Counter */}\n        <div className=\"bg-secondary rounded-lg p-3\" data-testid=\"credit-counter\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium\">Credits Remaining</span>\n            <span className=\"text-sm text-muted-foreground\" data-testid=\"text-credits-remaining\">\n              {credits} / {maxCredits}\n            </span>\n          </div>\n          <Progress value={creditPercentage} className=\"h-2 mb-2\" data-testid=\"progress-credits\" />\n          <Link href=\"/checkout\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"w-full text-xs text-primary hover:underline p-0 h-auto\"\n              data-testid=\"button-buy-credits\"\n            >\n              Buy More Credits\n            </Button>\n          </Link>\n        </div>\n        \n        {/* User Profile */}\n        <div className=\"flex items-center space-x-3\" data-testid=\"user-profile\">\n          <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\">\n            {user?.profileImageUrl ? (\n              <img \n                src={user.profileImageUrl} \n                alt=\"Profile\" \n                className=\"w-8 h-8 rounded-full object-cover\"\n                data-testid=\"img-user-avatar\"\n              />\n            ) : (\n              <User className=\"text-muted-foreground text-xs\" />\n            )}\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium\" data-testid=\"text-user-name\">\n              {user?.firstName || user?.email || 'User'}\n            </p>\n            <Badge variant=\"secondary\" className=\"text-xs\">Pro Plan</Badge>\n          </div>\n          <button \n            className=\"text-muted-foreground hover:text-foreground\"\n            onClick={() => window.location.href = '/api/logout'}\n            data-testid=\"button-settings\"\n          >\n            <Settings className=\"text-sm w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":5069},"client/src/components/research/file-upload.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  CloudUpload, \n  File, \n  FileText, \n  FileImage, \n  X,\n  CheckCircle,\n  AlertCircle\n} from \"lucide-react\";\n\ninterface UploadedFile {\n  id: string;\n  originalName: string;\n  filename: string;\n  size: number;\n  mimeType: string;\n  createdAt: string;\n}\n\nexport function FileUpload() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});\n\n  // Fetch existing documents\n  const { data: documents, isLoading: documentsLoading } = useQuery({\n    queryKey: [\"/api/documents\"],\n  });\n\n  // Upload mutation\n  const uploadMutation = useMutation({\n    mutationFn: async (files: File[]) => {\n      const formData = new FormData();\n      files.forEach(file => {\n        formData.append('files', file);\n      });\n\n      const response = await apiRequest(\"POST\", \"/api/documents/upload\", formData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      setUploadProgress({});\n      \n      toast({\n        title: \"Files Uploaded Successfully\",\n        description: \"Your documents are ready for research analysis.\",\n      });\n    },\n    onError: (error) => {\n      setUploadProgress({});\n      \n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n\n      toast({\n        title: \"Upload Failed\",\n        description: error.message || \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      await apiRequest(\"DELETE\", `/api/documents/${documentId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      toast({\n        title: \"Document Deleted\",\n        description: \"The document has been removed from your library.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete document.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    // Validate files\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    const allowedTypes = [\n      'application/pdf',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'text/plain',\n      'text/csv'\n    ];\n\n    const validFiles = acceptedFiles.filter(file => {\n      if (file.size > maxSize) {\n        toast({\n          title: \"File Too Large\",\n          description: `${file.name} exceeds 10MB limit.`,\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      \n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: \"Unsupported File Type\",\n          description: `${file.name} is not a supported file type.`,\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      \n      return true;\n    });\n\n    if (validFiles.length === 0) return;\n\n    // Initialize progress tracking\n    const progressMap: Record<string, number> = {};\n    validFiles.forEach(file => {\n      progressMap[file.name] = 0;\n    });\n    setUploadProgress(progressMap);\n\n    // Simulate progress updates\n    const interval = setInterval(() => {\n      setUploadProgress(prev => {\n        const updated = { ...prev };\n        validFiles.forEach(file => {\n          if (updated[file.name] < 90) {\n            updated[file.name] = Math.min(90, updated[file.name] + 10);\n          }\n        });\n        return updated;\n      });\n    }, 200);\n\n    // Upload files\n    uploadMutation.mutate(validFiles);\n    \n    // Clear interval after upload completes\n    setTimeout(() => {\n      clearInterval(interval);\n    }, 5000);\n  }, [toast, uploadMutation]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n      'text/plain': ['.txt'],\n      'text/csv': ['.csv']\n    },\n    maxFiles: 5,\n  });\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.includes('pdf')) return <FileText className=\"h-4 w-4 text-red-500\" />;\n    if (mimeType.includes('word')) return <FileText className=\"h-4 w-4 text-blue-500\" />;\n    if (mimeType.includes('csv')) return <File className=\"h-4 w-4 text-green-500\" />;\n    return <File className=\"h-4 w-4 text-muted-foreground\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <Card data-testid=\"card-file-upload\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <CloudUpload className=\"h-5 w-5 text-primary\" />\n          <span>Upload Documents</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Dropzone */}\n        <div\n          {...getRootProps()}\n          className={`drag-zone border-2 border-dashed rounded-lg p-8 text-center space-y-4 cursor-pointer transition-all duration-300 ${\n            isDragActive \n              ? 'border-primary bg-primary/5' \n              : 'border-border hover:border-primary hover:bg-primary/5'\n          }`}\n          data-testid=\"dropzone\"\n        >\n          <input {...getInputProps()} data-testid=\"file-input\" />\n          <CloudUpload className=\"h-12 w-12 text-muted-foreground mx-auto\" />\n          <div>\n            <p className=\"text-sm font-medium\">\n              {isDragActive ? \"Drop files here...\" : \"Drag & drop files here\"}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">or click to browse</p>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Supports PDF, DOCX, TXT, CSV (Max 10MB)\n          </p>\n        </div>\n\n        {/* Upload Progress */}\n        {Object.keys(uploadProgress).length > 0 && (\n          <div className=\"space-y-2\">\n            <h4 className=\"text-sm font-medium\">Uploading Files</h4>\n            {Object.entries(uploadProgress).map(([filename, progress]) => (\n              <div key={filename} className=\"space-y-1\">\n                <div className=\"flex items-center justify-between text-xs\">\n                  <span className=\"truncate\">{filename}</span>\n                  <span>{progress}%</span>\n                </div>\n                <Progress value={progress} className=\"h-1\" />\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Uploaded Files List */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"text-sm font-medium\">Your Documents</h4>\n            {documents && documents.length > 0 && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {documents.length} file{documents.length !== 1 ? 's' : ''}\n              </Badge>\n            )}\n          </div>\n          \n          {documentsLoading ? (\n            <div className=\"flex items-center justify-center py-4\">\n              <div className=\"animate-spin w-4 h-4 border-2 border-primary border-t-transparent rounded-full mr-2\" />\n              <span className=\"text-sm text-muted-foreground\">Loading documents...</span>\n            </div>\n          ) : documents && documents.length > 0 ? (\n            <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n              {documents.map((doc: UploadedFile) => (\n                <div \n                  key={doc.id} \n                  className=\"flex items-center justify-between p-3 bg-secondary rounded-md\"\n                  data-testid={`document-${doc.id}`}\n                >\n                  <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n                    {getFileIcon(doc.mimeType)}\n                    <div className=\"min-w-0 flex-1\">\n                      <p className=\"text-sm font-medium truncate\" title={doc.originalName}>\n                        {doc.originalName}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {formatFileSize(doc.size)} • {new Date(doc.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\"\n                    className=\"text-muted-foreground hover:text-destructive flex-shrink-0\"\n                    onClick={() => deleteMutation.mutate(doc.id)}\n                    disabled={deleteMutation.isPending}\n                    data-testid={`button-delete-${doc.id}`}\n                  >\n                    {deleteMutation.isPending ? (\n                      <div className=\"animate-spin w-3 h-3 border border-current border-t-transparent rounded-full\" />\n                    ) : (\n                      <X className=\"h-3 w-3\" />\n                    )}\n                  </Button>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-6 text-muted-foreground\">\n              <FileText className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground/50\" />\n              <p className=\"text-sm\">No documents uploaded yet</p>\n              <p className=\"text-xs\">Upload files to include them in your research</p>\n            </div>\n          )}\n        </div>\n\n        {/* Upload Status */}\n        {uploadMutation.isPending && (\n          <div className=\"flex items-center justify-center py-2 text-sm text-muted-foreground\">\n            <div className=\"animate-spin w-4 h-4 border-2 border-primary border-t-transparent rounded-full mr-2\" />\n            Processing files...\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11182},"client/src/components/research/processing-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Brain, \n  CheckCircle, \n  Search,\n  FileText,\n  Lightbulb,\n  Quote\n} from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface ProcessingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface ProcessingStep {\n  id: string;\n  label: string;\n  icon: React.ReactNode;\n  status: 'pending' | 'processing' | 'completed';\n}\n\nexport function ProcessingModal({ isOpen, onClose }: ProcessingModalProps) {\n  const [progress, setProgress] = useState(0);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<ProcessingStep[]>([\n    {\n      id: 'documents',\n      label: 'Processing uploaded documents',\n      icon: <FileText className=\"h-4 w-4\" />,\n      status: 'pending'\n    },\n    {\n      id: 'search',\n      label: 'Searching live data sources',\n      icon: <Search className=\"h-4 w-4\" />,\n      status: 'pending'\n    },\n    {\n      id: 'insights',\n      label: 'Extracting key insights',\n      icon: <Lightbulb className=\"h-4 w-4\" />,\n      status: 'pending'\n    },\n    {\n      id: 'citations',\n      label: 'Generating citations',\n      icon: <Quote className=\"h-4 w-4\" />,\n      status: 'pending'\n    }\n  ]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      // Reset state when modal closes\n      setProgress(0);\n      setCurrentStep(0);\n      setSteps(prev => prev.map(step => ({ ...step, status: 'pending' })));\n      return;\n    }\n\n    // Simulate processing steps\n    const stepDuration = 4000; // 4 seconds per step\n    const progressInterval = 100; // Update every 100ms\n\n    const interval = setInterval(() => {\n      setProgress(prev => {\n        const newProgress = prev + (100 / (stepDuration / progressInterval));\n        \n        // Update step status based on progress\n        const stepProgress = newProgress / 25; // 4 steps, so each is 25%\n        const currentStepIndex = Math.floor(stepProgress);\n        \n        if (currentStepIndex !== currentStep && currentStepIndex < steps.length) {\n          setCurrentStep(currentStepIndex);\n          \n          setSteps(prevSteps => prevSteps.map((step, index) => {\n            if (index < currentStepIndex) {\n              return { ...step, status: 'completed' };\n            } else if (index === currentStepIndex) {\n              return { ...step, status: 'processing' };\n            }\n            return step;\n          }));\n        }\n        \n        return Math.min(100, newProgress);\n      });\n    }, progressInterval);\n\n    return () => clearInterval(interval);\n  }, [isOpen, currentStep, steps.length]);\n\n  const getStepIcon = (step: ProcessingStep) => {\n    switch (step.status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-accent\" />;\n      case 'processing':\n        return (\n          <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n        );\n      default:\n        return <div className=\"w-4 h-4 rounded-full border-2 border-muted\" />;\n    }\n  };\n\n  const getStepTextColor = (step: ProcessingStep) => {\n    switch (step.status) {\n      case 'completed':\n        return 'text-foreground';\n      case 'processing':\n        return 'text-foreground font-medium';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent \n        className=\"max-w-md\" \n        data-testid=\"dialog-processing\"\n      >\n        <DialogHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Brain className=\"h-8 w-8 text-primary animate-pulse\" />\n          </div>\n          <DialogTitle data-testid=\"text-processing-title\">\n            Generating Your Report\n          </DialogTitle>\n          <DialogDescription>\n            Our AI is analyzing your sources and generating insights...\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Progress Steps */}\n          <div className=\"space-y-3\">\n            {steps.map((step, index) => (\n              <div \n                key={step.id} \n                className=\"flex items-center space-x-3\"\n                data-testid={`processing-step-${step.id}`}\n              >\n                {getStepIcon(step)}\n                <span className={`text-sm transition-colors ${getStepTextColor(step)}`}>\n                  {step.label}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"space-y-2\">\n            <Progress \n              value={progress} \n              className=\"h-2\" \n              data-testid=\"progress-processing\"\n            />\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n              <span>{Math.round(progress)}% complete</span>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                AI Processing\n              </Badge>\n            </div>\n          </div>\n\n          {/* Time Estimate */}\n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              Estimated time: {Math.max(1, Math.round((100 - progress) / 6))} seconds remaining\n            </p>\n          </div>\n\n          {/* Tips */}\n          <div className=\"bg-secondary rounded-lg p-3\">\n            <p className=\"text-xs text-muted-foreground text-center\">\n              💡 <strong>Tip:</strong> The more specific your question, the better insights our AI can provide!\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5866},"client/src/components/research/query-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { ProcessingModal } from \"./processing-modal\";\nimport { ReportViewer } from \"./report-viewer\";\nimport { Sparkles } from \"lucide-react\";\nimport { researchQuerySchema, type ResearchQuery } from \"@shared/schema\";\n\nexport function QueryForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showProcessing, setShowProcessing] = useState(false);\n  const [generatedReport, setGeneratedReport] = useState(null);\n\n  const form = useForm<ResearchQuery>({\n    resolver: zodResolver(researchQuerySchema),\n    defaultValues: {\n      question: \"\",\n      sourceTypes: [\"files\", \"web\"],\n      includeFiles: true,\n      includeLiveData: true,\n      includeAcademic: false,\n    },\n  });\n\n  const generateReportMutation = useMutation({\n    mutationFn: async (data: ResearchQuery) => {\n      const response = await apiRequest(\"POST\", \"/api/research/generate\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setShowProcessing(false);\n      setGeneratedReport(data);\n      form.reset();\n      \n      // Invalidate stats and reports queries to refresh the UI\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n      \n      toast({\n        title: \"Report Generated Successfully\",\n        description: \"Your research report is ready with verified citations.\",\n      });\n    },\n    onError: (error) => {\n      setShowProcessing(false);\n      \n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n\n      toast({\n        title: \"Report Generation Failed\",\n        description: error.message || \"Failed to generate report. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ResearchQuery) => {\n    if (data.question.trim().length < 10) {\n      toast({\n        title: \"Question Too Short\",\n        description: \"Please provide a more detailed research question.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setShowProcessing(true);\n    generateReportMutation.mutate(data);\n  };\n\n  return (\n    <>\n      <Card data-testid=\"card-research-query\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Sparkles className=\"h-5 w-5 text-primary\" />\n            <span>Ask a Research Question</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"question\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Research Question</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"What are the latest trends in AI-powered productivity tools for 2024?\"\n                        className=\"min-h-[100px] resize-none\"\n                        data-testid=\"textarea-research-question\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div>\n                <FormLabel className=\"text-sm font-medium mb-3 block\">Sources to Include</FormLabel>\n                <div className=\"space-y-3\">\n                  <FormField\n                    control={form.control}\n                    name=\"includeFiles\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox \n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-include-files\"\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal\">\n                          Uploaded Files\n                        </FormLabel>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"includeLiveData\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox \n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-include-live-data\"\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal\">\n                          Live Web Data\n                        </FormLabel>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"includeAcademic\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox \n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-include-academic\"\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal\">\n                          Academic Papers\n                        </FormLabel>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                disabled={generateReportMutation.isPending}\n                data-testid=\"button-generate-report\"\n              >\n                {generateReportMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    Generating Report...\n                  </>\n                ) : (\n                  <>\n                    <Sparkles className=\"mr-2 h-4 w-4\" />\n                    Generate Report (1 Credit)\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      <ProcessingModal \n        isOpen={showProcessing} \n        onClose={() => setShowProcessing(false)}\n      />\n\n      {generatedReport && (\n        <ReportViewer \n          report={generatedReport}\n          isOpen={!!generatedReport}\n          onClose={() => setGeneratedReport(null)}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":7929},"client/src/components/research/report-viewer.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Download, \n  Share2, \n  ExternalLink, \n  CheckCircle, \n  Clock,\n  Link as LinkIcon,\n  Quote,\n  FileText,\n  Globe,\n  BookOpen\n} from \"lucide-react\";\n\ninterface ReportSource {\n  title: string;\n  url: string;\n  type: 'file' | 'web' | 'academic';\n  confidence: number;\n  publishedDate?: string;\n}\n\ninterface ReportCitation {\n  id: string;\n  source: ReportSource;\n  relevance: number;\n  excerpt: string;\n}\n\ninterface ReportData {\n  reportId: string;\n  report: {\n    title: string;\n    executiveSummary: string;\n    keyInsights: string[];\n    sources: ReportSource[];\n    citations: ReportCitation[];\n    processingTimeMs: number;\n    sourceBreakdown: {\n      files: number;\n      web: number;\n      live: number;\n    };\n  };\n}\n\ninterface ReportViewerProps {\n  report: ReportData | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ReportViewer({ report, isOpen, onClose }: ReportViewerProps) {\n  const [activeTab, setActiveTab] = useState<'report' | 'sources'>('report');\n\n  if (!report) return null;\n\n  const { report: reportData } = report;\n\n  const getSourceIcon = (type: string) => {\n    switch (type) {\n      case 'file':\n        return <FileText className=\"h-3 w-3\" />;\n      case 'web':\n        return <Globe className=\"h-3 w-3\" />;\n      case 'academic':\n        return <BookOpen className=\"h-3 w-3\" />;\n      default:\n        return <FileText className=\"h-3 w-3\" />;\n    }\n  };\n\n  const getSourceColor = (type: string) => {\n    switch (type) {\n      case 'file':\n        return 'text-blue-500';\n      case 'web':\n        return 'text-green-500';\n      case 'academic':\n        return 'text-purple-500';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  const handleExport = () => {\n    // Create a formatted text version of the report\n    let exportText = `# ${reportData.title}\\n\\n`;\n    exportText += `## Executive Summary\\n${reportData.executiveSummary}\\n\\n`;\n    \n    if (reportData.keyInsights.length > 0) {\n      exportText += `## Key Insights\\n`;\n      reportData.keyInsights.forEach((insight, index) => {\n        exportText += `${index + 1}. ${insight}\\n`;\n      });\n      exportText += '\\n';\n    }\n    \n    if (reportData.citations.length > 0) {\n      exportText += `## Sources & Citations\\n`;\n      reportData.citations.forEach((citation, index) => {\n        exportText += `[${index + 1}] ${citation.source.title}\\n`;\n        exportText += `URL: ${citation.source.url}\\n`;\n        if (citation.source.publishedDate) {\n          exportText += `Published: ${new Date(citation.source.publishedDate).toLocaleDateString()}\\n`;\n        }\n        exportText += `Excerpt: \"${citation.excerpt}\"\\n\\n`;\n      });\n    }\n\n    // Create and download file\n    const blob = new Blob([exportText], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${reportData.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleShare = async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: reportData.title,\n          text: reportData.executiveSummary,\n          url: window.location.href,\n        });\n      } catch (error) {\n        // Fallback to clipboard\n        navigator.clipboard.writeText(window.location.href);\n      }\n    } else {\n      // Fallback to clipboard\n      navigator.clipboard.writeText(window.location.href);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] flex flex-col\" data-testid=\"dialog-report-viewer\">\n        <DialogHeader>\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1 min-w-0\">\n              <DialogTitle className=\"text-xl font-bold leading-tight\" data-testid=\"text-report-title\">\n                {reportData.title}\n              </DialogTitle>\n              <DialogDescription className=\"mt-2\">\n                <div className=\"flex items-center space-x-4 text-sm\">\n                  <span className=\"flex items-center space-x-1\">\n                    <Clock className=\"h-3 w-3\" />\n                    <span>Generated in {Math.round(reportData.processingTimeMs / 1000)}s</span>\n                  </span>\n                  <span className=\"flex items-center space-x-1\">\n                    <LinkIcon className=\"h-3 w-3\" />\n                    <span>{reportData.sources.length} sources</span>\n                  </span>\n                  <span className=\"flex items-center space-x-1\">\n                    <Quote className=\"h-3 w-3\" />\n                    <span>{reportData.citations.length} citations</span>\n                  </span>\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    Fresh Data\n                  </Badge>\n                </div>\n              </DialogDescription>\n            </div>\n            <div className=\"flex items-center space-x-2 ml-4\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={handleExport}\n                data-testid=\"button-export-report\"\n              >\n                <Download className=\"mr-1 h-3 w-3\" />\n                Export\n              </Button>\n              <Button \n                size=\"sm\" \n                onClick={handleShare}\n                data-testid=\"button-share-report\"\n              >\n                <Share2 className=\"mr-1 h-3 w-3\" />\n                Share\n              </Button>\n            </div>\n          </div>\n        </DialogHeader>\n\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-1 border-b border-border\">\n          <button\n            className={`px-3 py-2 text-sm font-medium border-b-2 transition-colors ${\n              activeTab === 'report'\n                ? 'border-primary text-primary'\n                : 'border-transparent text-muted-foreground hover:text-foreground'\n            }`}\n            onClick={() => setActiveTab('report')}\n            data-testid=\"tab-report\"\n          >\n            Report\n          </button>\n          <button\n            className={`px-3 py-2 text-sm font-medium border-b-2 transition-colors ${\n              activeTab === 'sources'\n                ? 'border-primary text-primary'\n                : 'border-transparent text-muted-foreground hover:text-foreground'\n            }`}\n            onClick={() => setActiveTab('sources')}\n            data-testid=\"tab-sources\"\n          >\n            Sources ({reportData.sources.length})\n          </button>\n        </div>\n\n        {/* Content */}\n        <ScrollArea className=\"flex-1 pr-4\">\n          {activeTab === 'report' ? (\n            <div className=\"space-y-6 py-4\" data-testid=\"report-content\">\n              {/* Executive Summary */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-primary mb-3\">Executive Summary</h3>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  {reportData.executiveSummary}\n                </p>\n              </div>\n\n              <Separator />\n\n              {/* Key Insights */}\n              {reportData.keyInsights.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold text-primary mb-3\">Key Insights</h3>\n                  <ul className=\"space-y-3\">\n                    {reportData.keyInsights.map((insight, index) => (\n                      <li \n                        key={index} \n                        className=\"flex items-start space-x-3\"\n                        data-testid={`insight-${index}`}\n                      >\n                        <CheckCircle className=\"h-4 w-4 text-accent mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-sm text-muted-foreground leading-relaxed\">\n                          {insight}\n                        </span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {/* Citations */}\n              {reportData.citations.length > 0 && (\n                <>\n                  <Separator />\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-primary mb-3\">Citations</h3>\n                    <div className=\"space-y-4\">\n                      {reportData.citations.map((citation, index) => (\n                        <div \n                          key={citation.id} \n                          className=\"bg-secondary rounded-lg p-4\"\n                          data-testid={`citation-${index}`}\n                        >\n                          <div className=\"flex items-start space-x-3\">\n                            <span className=\"text-primary font-medium flex-shrink-0\">\n                              [{index + 1}]\n                            </span>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                <div className={`flex items-center space-x-1 ${getSourceColor(citation.source.type)}`}>\n                                  {getSourceIcon(citation.source.type)}\n                                  <span className=\"text-sm font-medium\">\n                                    {citation.source.title}\n                                  </span>\n                                </div>\n                                <Badge \n                                  variant=\"outline\" \n                                  className=\"text-xs\"\n                                >\n                                  {Math.round(citation.source.confidence * 100)}% confidence\n                                </Badge>\n                              </div>\n                              <p className=\"text-xs text-muted-foreground mb-2\">\n                                \"{citation.excerpt}\"\n                              </p>\n                              <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                                <a \n                                  href={citation.source.url}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"flex items-center space-x-1 text-primary hover:underline\"\n                                >\n                                  <ExternalLink className=\"h-3 w-3\" />\n                                  <span>View Source</span>\n                                </a>\n                                {citation.source.publishedDate && (\n                                  <span>\n                                    Published: {new Date(citation.source.publishedDate).toLocaleDateString()}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          ) : (\n            /* Sources Tab */\n            <div className=\"space-y-4 py-4\" data-testid=\"sources-content\">\n              {/* Source Breakdown */}\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {reportData.sourceBreakdown.files}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Files</div>\n                </div>\n                <div className=\"text-center p-3 bg-green-50 dark:bg-green-950/20 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {reportData.sourceBreakdown.web}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Web Sources</div>\n                </div>\n                <div className=\"text-center p-3 bg-purple-50 dark:bg-purple-950/20 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {reportData.sourceBreakdown.live}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Live Data</div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Source List */}\n              <div className=\"space-y-3\">\n                {reportData.sources.map((source, index) => (\n                  <div \n                    key={index} \n                    className=\"border border-border rounded-lg p-4 hover:bg-secondary/50 transition-colors\"\n                    data-testid={`source-${index}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <div className={`flex items-center space-x-1 ${getSourceColor(source.type)}`}>\n                            {getSourceIcon(source.type)}\n                            <span className=\"text-sm font-medium\">\n                              {source.title}\n                            </span>\n                          </div>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {source.type}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                          <span>Confidence: {Math.round(source.confidence * 100)}%</span>\n                          {source.publishedDate && (\n                            <span>\n                              Published: {new Date(source.publishedDate).toLocaleDateString()}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"icon\"\n                        asChild\n                        className=\"flex-shrink-0\"\n                      >\n                        <a \n                          href={source.url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          data-testid={`button-view-source-${index}`}\n                        >\n                          <ExternalLink className=\"h-4 w-4\" />\n                        </a>\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":15239},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}